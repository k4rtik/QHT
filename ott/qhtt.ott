metavar progvar, x, y, z ::=
  {{ com program variable }}
metavar ghostvar, e, u, g ::=
  {{ com ghost variable }}
metavar termvar, v, w ::=
  {{ com variable }}

indexvar index, n ::=

% metavar heapvar, h, init, mem ::=
%   {{ tex \mathit{[[heapvar]]} }} {{ com heap variable }}


grammar
VarSet, V, W :: '' ::= {{ com variables }}
  | v1 .. vn  :: :: Vars

PVarSet, X, Y, Z :: '' ::= {{ com program variables }}
  | x1 .. xn  :: :: PVars

EGVarSet, E :: '' ::= {{ com entangled ghosts }}
  | e1 .. en  :: :: EVars

UGVarSet, U :: '' ::= {{ com unentangled ghosts }}
  | u1 .. un  :: :: UVars

GVarSet, G :: '' ::= {{ com ghost variables }}
  | g1 .. gn  :: :: GVars

  A, B :: Ty ::=                                        {{ com Types }}
    | Unit                ::   :: Unit                    {{ com unit }}
    % | Bool                ::   :: Bool                    {{ com booleans }}
    | Qbit                ::   :: Qubit                   {{ com qubits }}
    % | U                   ::   :: Unitary                 {{ com unitary }}
    | A otimes B                  ::   :: pair                    {{ com product }}
    | Pi x : A . B                ::   :: Pi    (+ bind x in B +) {{ com dependent function }}
    | A -> B                      :: S :: arrow                   {{ com function }}
    | D . Psi . { P } x : A { Q } ::   :: Hoare (+ bind x in Q +) {{ com hoare type }}
    | { P } x : A { Q }   :: S :: HoareS
    | ( A )               :: S :: paren
    | [ N / x ] A         :: M :: tsub

  P, Q, R :: Pr ::= {{ com Predicates }}
    | top                 ::   :: Top
    | bot                 ::   :: Bot
    | P /\ Q              ::   :: Conjunction
    % | P, Q                :: S :: ConjSugar
    | P \/ Q              ::   :: Disjunction
    | M . P               ::   :: Operator
    | X inq S             ::   :: VarListInSubspaceS
    | W =q psi            ::   :: VarListEqState
    | P { W / W' }        :: M :: Renaming
    | separable ( X )     ::   :: Separable
    | class ( X )         ::   :: Classical
    | ( P )               :: S :: Paren

  K, L :: ElimTm ::=                                    {{ com Elim Terms }}
    | x                   ::   :: Var                     {{ com variable }}
    | K N                 ::   :: App                     {{ com application }}
    | N : A               ::   :: Annot
    | ( K )               :: S :: paren
    | [ K / x ] M         :: M :: tsub

  N, O :: IntroTm ::=                                {{ com Intro Terms }}
    | K                   ::   :: Elim
    | \ x . N             ::   :: Lam  (+ bind x in N +)  {{ com abstraction }}
    | ()                  ::   :: unit
    | do F                ::   :: Computation

  c, d :: Cmd ::= {{ com Primitive Quantum Commands }}
    | init x             :: :: init
    | apply U to X       :: :: apply
    | if y then c else d :: :: ite
    | c ; d              :: :: seq
    | skip               :: :: skip
    | X <-q psi          :: S:: initq
    | X <- z             :: S:: initc
    | Y <- measure X     :: S:: meas
    % | measQbit M         :: :: measure

  F :: Comp ::=  {{ com Computations }}
    | return N        ::   :: lift
    | x <- K ; F      ::   :: bindK     (+ bind x in F +)
    | x <= c ; F      ::   :: bindC     (+ bind x in F +)
    | x =_A N ; F     ::   :: bindPure  (+ bind x in F +)
    | ( F )           :: S :: paren
    | < F / x : A > F' :: M :: msub                        {{ com monadic substitution }}

  D {{ tex \Delta }} :: VCtx ::= {{ com Variable Context }}
    | empty               ::   :: em  {{ tex \cdot }}
    | D , x : A           ::   :: vn

  Psi {{ tex \Psi }} :: HCtx ::= {{ com Quantum Heap Context }}
    | empty               ::   :: em  {{ tex \cdot }}
    | Psi , h             ::   :: vn
    | h                   :: S :: alone

  Gm {{ tex \Gamma }} :: ACtx ::= {{ com Assertion Context }}
    | empty               ::   :: em  {{ tex \cdot }}
    | Gm , P              ::   :: vn
    | P                   :: S :: alone

  terminals :: 'terminals_' ::=
    | \                   ::   :: lambda     {{ tex \lambda }}
    | -->                 ::   :: red        {{ tex \longrightarrow }}
    | |=                  ::   :: seqimp     {{ tex \models }}
    | ==>b                ::   :: bred       {{ tex \Longrightarrow_\beta }}
    | ==>e                ::   :: expand     {{ tex \Longrightarrow_\eta }}
    |  ->                 ::   :: arrow      {{ tex \rightarrow }}
    | <-                  ::   :: larrow     {{ tex \leftarrow }}
    | <=                  ::   :: lbarrow    {{ tex \Leftarrow }}
    |  =>                 ::   :: rbarrow    {{ tex \Rightarrow }}
    | <                   ::   :: langle     {{ tex \langle }}
    | >                   ::   :: rangle     {{ tex \rangle }}
    | |-                  ::   :: turnstile  {{ tex \vdash }}
    | syn                 ::   :: syn        {{ tex \textcolor{red}{\stackrel{\rightarrow}{\in} } }}
    | chk                 ::   :: chk        {{ tex \textcolor{blue}{\stackrel{\leftarrow}{\in} } }}
    | in                  ::   :: in         {{ tex \in }}
    | inq                 ::   :: inq        {{ tex \in_q }}
    | =q                  ::   :: eqq        {{ tex =_q }}
    | <-q                 ::   :: initq      {{ tex \stackrel{q}{\leftarrow} }}
    | Pi                  ::   :: pi         {{ tex \Pi }}
    | psi                 ::   :: psi        {{ tex \psi }}
    | otimes              ::   :: otimes     {{ tex \otimes }}
    | top                 ::   :: top        {{ tex \top }}
    | bot                 ::   :: bot        {{ tex \bot }}
    | /\                  ::   :: and        {{ tex \wedge }}
    | \/                  ::   :: or         {{ tex \vee }}
    | imp                 ::   :: imp        {{ tex \supset }}
    | not                 ::   :: not        {{ tex \neg }}
    | ex                  ::   :: exists     {{ tex \exists }}
    | all                 ::   :: forall     {{ tex \forall }}
    | Id_A                ::   :: IdA        {{ tex \mathbf{Id}_A }}
    | =_A                 ::   :: AssA       {{ tex =_A }}
    | o                   ::   :: RelComp    {{ tex \circ }}
    | -o                  ::   :: Lollipop   {{ tex \multimap }}
    | |->                 ::   :: SMapsto    {{ tex \mapsto }}
    | C->                 ::   :: SAtLeastMT {{ tex \hookrightarrow }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | not ( formula )     ::   :: not
    | x = x'              ::   :: eqv
    | x : A in D          ::   :: xAD

% subrules
%   E <:: G
%   U <:: G
%   P <:: V
%   G <:: V

freevars
  N x :: fv

defns
  Jtype :: '' ::=

defn
    D |- A chk type :: :: Type :: Type {{ com $[[A]]$ is a well-formed type }} by

defn
    D |- K syn A :: :: TElim :: TElim         {{ com Elim term $[[K]]$ synthesizes type $[[A]]$ }} by

    ----------------- :: Var
    D, x:A |- x syn A

    D |- K syn Pi x:A.B
    D |- N chk A
    --------------------- :: Pi
    D |- K N syn [N/x](B)

   D |- A chk type
   D |- N chk A
   -------------- :: Annot
   D |- N:A syn A

defn
    D |- N chk A :: :: TIntro :: TIntro       {{ com Intro term $[[N]]$ checks against type $[[A]]$ }} by

    ---------------- :: Unit
    D |- () chk Unit

    D, x:A |- N chk B
    ---------------------- :: Pi
    D |- \x.N chk Pi x:A.B

    % D; HId(init, mem) /\ P |- E chk x:A.Q
    % ------------------------------------- :: Hoare
    % D |- do E chk {P}x:A{Q}

    % D; this(init) /\ ex D'.Psi.(R1 * top) |- E chk x:A. all D'.Psi.R1 -o R2
    % ----------------------------------------------------------------------- :: DoE
    % D |- do E chk D'.Psi.{R1} x:A {R2}

defn
    D ; P |- E syn x : A . Q :: :: SPC :: SPC {{ com $[[E]]$ synthesizes strongest postcondition $[[Q]]$ }} by

    % D |- M chk A
    % ------------------------------------------- :: return
    % D; P |- return M syn x:A. P /\ Id_A(x, M)

    % D |- K syn D'.Psi.{R1} x:A {R2}
    % D; init, mem; P |= ex D'.Psi.(R1 * top)
    % D, x:A; P o (all D'.Psi.R1 -o R2) |- E syn y:B.Q
    % ------------------------------------------------ :: composeSuspended
    % D; P |- x <- K; E syn y:B.(ex x:A.Q)


    % D |- M chk Bool
    % D, x:Qbit; P * (x |-> M') |- E syn y:B.Q
    % ---------------------------------------------- :: init
    % D; P |- x <= mkQbit M; E syn y:B.(ex x:Qbit.Q)

    % D |- M chk Qbit
    % D; Psi; P |= (M C-> -)
    % D, x:Bool; P o ((M |-> -) -o emp) |- E syn y:B.Q
    % ---------------------------------------------- :: meas
    % D; P |- x <= measQbit M; E syn y:B.(ex x:Bool.Q)

defn
    D ; P |- E chk x : A . Q :: :: PC :: PC   {{ com $[[E]]$ satisfies postcondition $[[Q]]$ }} by

    % D; P |- E syn x:A.R
    % D, x:A; init, mem; R |= Q
    % -------------------------- :: consq
    % D; P |- E chk x:A.Q

defn
    D ; Psi ; Gm1 |= Gm2 :: :: SeqImp :: SeqImp by

    D; Psi; Gm1 |= Gm2, P
    D; Psi; Gm1, P |= Gm2
    ---------------------- :: Cut
    D; Psi; Gm1 |= Gm2

    % ------------------------------- :: ReflEqR
    % D; Psi; Gm1 |= Gm2, Id_A(M, M)

    % ------------------------------- :: HReflEqR
    % D; Psi; Gm1 |= Gm2, HId(H, H)
defns
  Jop :: '' ::=

    defn
    N ==>b N' ::  :: reduce :: 'B'       {{ com $[[N]]$ beta reduces to $[[N']]$ }} by

    % ------------------------------- :: AppAbs
    % (\x.N:Pi x:A.B) O ==>b [O:A/x]N

    defn
    N ==>e N' ::  :: expand :: 'E'       {{ com $[[N]]$ eta expands to $[[N']]$ }} by

    ---------------- :: Unit
    N : Unit ==>e ()

    -------------------------------- :: Abs
    N:Pi x:A.B ==>e \y.(N:Pi x:A.B)y

    -------------------------------------- :: Comp
    K:{P}x:A{Q} ==>e do (x <- K; return x)

    defn
    F ==>b F' ::  :: creduce :: 'B'       {{ com Computation $[[F]]$ beta reduces to $[[F']]$ }} by

    --------------------------------------- :: Comp
    x <- do F:{P}x:A{Q}; F' ==>b <F/x:A> F'
